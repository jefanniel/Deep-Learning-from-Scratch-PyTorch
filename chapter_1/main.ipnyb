{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "cf5ebf1c",
   "metadata": {},
   "source": [
    "# Chapter 1: Foundations"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a15366f",
   "metadata": {},
   "source": [
    "### Importing necessary libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "70ed7b1f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from numpy import ndarray\n",
    "from typing import Callable"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7accf85",
   "metadata": {},
   "source": [
    "### NDarrays clarified\n",
    "\n",
    "An ndarray stands for N-Dimensional array and is a key component of numpy and machine learning. \n",
    "\n",
    "It can be thought of as a container for numbers arranged in a list (1D), a matrix (2D), or a stack of matrices (3D)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3a7f3ce3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "(3,)\n",
      "3\n"
     ]
    }
   ],
   "source": [
    "array1d = np.array([1,2,3])\n",
    "\n",
    "print(array1d.ndim)\n",
    "print(array1d.shape)\n",
    "print(array1d.size)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7554139",
   "metadata": {},
   "source": [
    "As can be seen, the dimension of the array is 1D because it is a list of numbers. The shape is just a tuple of 3, and the size is 3. Size refers to the number of elements in total."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "28a13cb9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n",
      "(3, 3)\n",
      "9\n"
     ]
    }
   ],
   "source": [
    "array2d = np.array(\n",
    "    [\n",
    "        [1,2,3],\n",
    "        [3,4,5],\n",
    "        [5,6,7]\n",
    "    ]\n",
    ")\n",
    "\n",
    "print(array2d.ndim)\n",
    "print(array2d.shape)\n",
    "print(array2d.size)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2800a494",
   "metadata": {},
   "source": [
    "The 2D array is a matrix of 3x3 dimensions (shape), containing a 9 elements (shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "81ff1c1f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n",
      "(2, 3, 3)\n",
      "18\n"
     ]
    }
   ],
   "source": [
    "array3d = np.array(\n",
    "    [\n",
    "        [\n",
    "            [1,2,3],\n",
    "            [4,5,6],\n",
    "            [7,8,9]\n",
    "        ],\n",
    "        [\n",
    "            [10,11,12],\n",
    "            [13,14,15],\n",
    "            [16,17,18]\n",
    "        ]\n",
    "    ]\n",
    ")\n",
    "\n",
    "print(array3d.ndim)\n",
    "print(array3d.shape)\n",
    "print(array3d.size)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "92e09f84",
   "metadata": {},
   "source": [
    "This 3D matrix has a dimension of 3 (ndim), shape of 2,3,3. \n",
    "1st dimension: number of elements in the outermost array.\n",
    "2nd dimension: number of rows in each sub-array\n",
    "3rd dimension: number of columns in each row.\n",
    "In a geometric sense, this shape represents a 3x3 square stacked on top of another one to create a stack height of 2. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b95b4080",
   "metadata": {},
   "source": [
    "### Square Function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "25a258f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "def square (x: ndarray) -> ndarray:\n",
    "    return np.power(x, 2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0e9bcfc",
   "metadata": {},
   "source": [
    "### Leaky ReLU Function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "9b503f21",
   "metadata": {},
   "outputs": [],
   "source": [
    "def leaky_relu(x: ndarray) -> ndarray:\n",
    "    return np.maximum(0.2 * x, x)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3fd2fd0d",
   "metadata": {},
   "source": [
    "The Leaky ReLU Function is an activation function that, unlike the actual ReLU function, will output a value instead of just 0 all the time to avoid having \"dead\" neurons\n",
    "\n",
    "This function accepts an n-dimensional array, and changes each element in the array to a value that is determined by whichever one is larger, 0.2 * x, or just x"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc66f0ae",
   "metadata": {},
   "source": [
    "### Derivative Function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "dde7442e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2., 4.])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def deriv( func: Callable[[ndarray], ndarray],\n",
    "          input_: ndarray, \n",
    "          delta: float = 0.001 \n",
    "        ) -> ndarray:\n",
    "    output_up = func(input_ + delta)\n",
    "    output_down = func(input_ - delta)\n",
    "    change = output_up - output_down\n",
    "    slope = change / (2 * delta)\n",
    "    return slope\n",
    "\n",
    "example_input = np.array([1,2])\n",
    "\n",
    "deriv(square, example_input, 0.001)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27e1427b",
   "metadata": {},
   "source": [
    "This function uses a numerical method, called the central difference approximation to estimate the derivative of a function at a given point. The derivatiev of x^2 is 2x. Thus, putting in [1,2] will give me [2,4]. The function 'deriv' gives me the output of the derivative function of a function."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc23077d",
   "metadata": {},
   "source": [
    "### Nested Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0cfc6409",
   "metadata": {},
   "outputs": [],
   "source": [
    "from typing import List\n",
    "\n",
    "Array_Function = Callable[[ndarray], ndarray] #Function takes in an array and outputs an array\n",
    "\n",
    "Chain = List[Array_Function] #Chain is a list of functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "0b7c38e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "def chain_length_2(chain: Chain, a: ndarray) -> ndarray:\n",
    "    assert len(chain) == 2, \"Length of input 'chain' should be 2\"\n",
    "    f1 = chain[0]\n",
    "    f2 = chain[1]\n",
    "    return f2(f1(a))\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}